# 订单相关的GraphQL操作

# 查询当前用户有权限的所有订单（通过用户ID过滤其创建的店铺的订单）
query GetUserOrders($userId: ID!) {
  orders(filter: { boutique: { user_created: { id: { _eq: $userId } } } }) {
    id
    customer {
      id
      nick_name
      open_id
      avatar
      sex
    }
    boutique {
      id
      name
      address
    }
    total_price
    status
    date_created
    date_updated
    user_created {
      id
      first_name
      last_name
      email
    }
  }
}

# 查询指定店铺的订单（基于boutique.id过滤）- 保留用于特殊需求
query GetOrders($boutiqueId: GraphQLStringOrFloat) {
  orders(filter: { boutique: { id: { _eq: $boutiqueId } } }) {
    id
    customer {
      id
      nick_name
      open_id
      avatar
      sex
    }
    boutique {
      id
      name
      address
    }
    total_price
    status
    date_created
    date_updated
    user_created {
      id
      first_name
      last_name
      email
    }
  }
}

# 查询所有订单（管理员用，无权限过滤）
query GetAllOrders {
  orders {
    id
    customer {
      id
      nick_name
      open_id
      avatar
      sex
    }
    boutique {
      id
      name
      address
    }
    total_price
    status
    date_created
    date_updated
    user_created {
      id
      first_name
      last_name
      email
    }
  }
}

# 根据ID查询订单
query GetOrderById($id: ID!) {
  orders_by_id(id: $id) {
    id
    customer {
      id
      nick_name
      open_id
      avatar
      sex
    }
    boutique {
      id
      name
      address
    }
    total_price
    status
    date_created
    date_updated
  }
}

# 由于schema中没有order_items表，这个查询需要重新设计
# query GetOrderItems($orderId: GraphQLStringOrFloat!) {
#   order_items(filter: { order_id: { id: { _eq: $orderId } } }) {
#     id
#     order_id {
#       id
#     }
#     product_id {
#       id
#       name
#       description
#     }
#     quantity
#     price
#   }
# }

# 创建订单
mutation CreateOrder($data: create_orders_input!) {
  create_orders_item(data: $data) {
    id
    customer {
      id
      nick_name
    }
    boutique {
      id
      name
      address
    }
    total_price
    status
    date_created
    date_updated
  }
}

# 更新订单
mutation UpdateOrder($id: ID!, $data: update_orders_input!) {
  update_orders_item(id: $id, data: $data) {
    id
    customer {
      id
      nick_name
    }
    boutique {
      id
      name
      address
    }
    total_price
    status
    date_created
    date_updated
  }
}

# 删除订单
mutation DeleteOrder($id: ID!) {
  delete_orders_item(id: $id) {
    id
  }
}

# 更新订单状态
mutation UpdateOrderStatus($id: ID!, $status: String!) {
  update_orders_item(id: $id, data: { status: $status }) {
    id
    status
    date_updated
  }
}

# 实时订阅所有订单变化（用户有权限的所有店铺）
# 注意：Directus 的订阅会自动应用权限过滤，只返回用户有权访问的订单
subscription OrdersRealtime {
  orders_mutated {
    key
    event
    data {
      id
      customer {
        id
        nick_name
        open_id
        avatar
        sex
      }
      boutique {
        id
        name
        address
      }
      total_price
      status
      date_created
      date_updated
    }
  }
}
